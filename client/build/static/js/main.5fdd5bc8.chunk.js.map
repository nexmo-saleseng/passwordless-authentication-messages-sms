{"version":3,"sources":["components/login/index.js","components/home/index.js","App.js","serviceWorker.js","index.js"],"names":["Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","auth","code","_confettiEffect","values","queryString","parse","props","location","search","intervalId","setInterval","checkAuth","bind","console","log","filter","setState","authenticated","ConfettiGenerator","target","clearInterval","_this2","_this$state","axios","post","authCode","then","res","data","authResult","render","_this$state2","react_default","a","createElement","Fragment","className","style","minWidth","id","Component","Home","recipient","smsSent","handleChange","assertThisInitialized","sendSMS","event","value","justifyContent","htmlFor","width","type","onChange","onClick","AppRouter","react_router_dom","react_router","path","component","Boolean","window","hostname","match","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5fdd5bc8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport queryString from 'query-string';\nimport axios from 'axios';\nimport ConfettiGenerator from \"confetti-js\";\n\nclass Login extends Component {\n    constructor() {\n        super();\n        this.state = { auth: '', code: '' };\n        this._confettiEffect = null;\n    }\n    componentDidMount () {\n        const values = queryString.parse( this.props.location.search );\n        const intervalId = setInterval( this.checkAuth.bind( this ), 2000, 1 );\n        console.log( values.filter );\n        console.log( values );\n        this.setState( {\n            auth: values.auth,\n            code: values.code,\n            intervalId,\n            authenticated: false\n        } )\n        this._confettiEffect = new ConfettiGenerator( { target: 'auth-completed-confetti' } );\n    }\n\n    componentWillUnmount () {\n        clearInterval( this.state.intervalId );\n    }\n\n    checkAuth () {\n        const { auth, intervalId } = this.state;\n        axios.post( 'https://3etfelg62j.execute-api.eu-west-2.amazonaws.com/dev/auth/check-auth', { authCode: auth } ).then( ( res ) => {\n            console.log( '[checkAuth]', res );\n            if ( res && res.data ) {\n                const { authenticated } = res.data.authResult;\n                this.setState( {\n                    authenticated\n                } )\n                if ( authenticated ) {\n                    this._confettiEffect.render();\n                    clearInterval( intervalId )\n                }\n            }\n        } );\n    }\n\n    // todo devo fare un timer che chiede se il codice e' stato mandato\n\n    render () {\n        const { code, authenticated } = this.state;\n        return (\n            <>\n\n                <div className=\"login-card Vlt-margin--top4\">\n                    \n                        <div className=\"Vlt-card\" style={{minWidth: 360}}>\n                            <div className=\"Vlt-card__header\">\n                                <h2>Login page</h2>\n                            </div>\n                            <h5 className=\"Vlt-center\">\n                                To authenticate, please send an SMS with the following code:\n                        </h5>\n                            <div className=\"login-code-text letter-spacing\">\n                                <span>{code}</span>\n                            </div>\n                            {\n                                authenticated ? <div className=\"Vlt-center\"><h3 className=\"Vlt-green\">Authenticated</h3></div>\n                                    :\n                                    <div className=\"Vlt-center\">\n                                        <div className=\"Vlt-spinner \"></div>\n                                    </div>\n                            }\n\n                        </div>\n\n                    \n                </div>\n                <canvas id=\"auth-completed-confetti\"></canvas>\n            </>\n        );\n    }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Home extends Component {\n\n    constructor() {\n        super();\n        this.state = { recipient: '', smsSent: false }\n        this.handleChange = this.handleChange.bind( this );\n        this.sendSMS = this.sendSMS.bind( this );\n    }\n\n    handleChange ( event ) {\n        this.setState( { recipient: event.target.value } );\n    }\n\n    sendSMS () {\n        const { recipient,smsSent } = this.state;\n        if ( recipient && !smsSent) {\n            axios.post( 'https://3etfelg62j.execute-api.eu-west-2.amazonaws.com/dev/auth/create', { recipient } ).then( () => {\n                this.setState( { smsSent: true } );\n            } );\n        }\n\n    }\n\n    render () {\n        const { recipient, smsSent } = this.state;\n        return (\n            <div className=\"Vlt-grid Vlt-margin--top4\" style={{ justifyContent: 'center' }}>\n                <div className=\"Vlt-col Vlt-col--1of2\">\n                    <div className=\"Vlt-card\">\n                        <div className=\"Vlt-card__header\">\n                            <h2>Type your phone number to login:</h2>\n                        </div>\n                        <div className=\"Vlt-form__element\">\n                            <label className=\"Vlt-label\" htmlFor=\"phone-number-input\">Insert your phone number. </label>\n                            <div className=\"Vlt-input\">\n                                <input value={recipient} style={{ width: 250 }} type=\"number\" id=\"phone-number-input\" onChange={this.handleChange} />\n                            </div>\n                            <button className=\"Vlt-btn Vlt-btn--secondary Vlt-btn--app\" onClick={this.sendSMS}>Send</button>\n                        </div>\n                        {\n                            smsSent && <div className=\"Vlt-callout Vlt-callout--good\">\n                                <i></i>\n                                <div className=\"Vlt-callout__content\">\n                                    You will get an SMS shortly with a link to use for logging in\n                            </div>\n                            </div>\n                        }\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Login from './components/login'\nimport Home from './components/home'\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n            <Route path=\"/login/\" component={Login} />\n            <Route component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}