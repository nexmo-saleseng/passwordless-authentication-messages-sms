# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: passwordless-auth # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    DYNAMODB_TABLE: ${file(config.json):DYNAMODB_TABLE}
    NEXMO_API_KEY: ${file(config.json):NEXMO_API_KEY}
    NEXMO_API_SECRET: ${file(config.json):NEXMO_API_SECRET}
    REGION: ${file(config.json):REGION}
  # you can overwrite defaults here
  #  stage: dev
  region: ${file(config.json):REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}
        - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  create-auth-code:
    handler: functions/create-auth-code.handler
    events:
      - http:
          path: auth/create-auth-code
          method: post
          cors: true
  check-auth-code:
    handler: functions/check-auth-code.handler
    events:
      - http:
          path: auth/check-auth-code
          method: post
          cors: true
  messages-webhook-inbound:
    handler: functions/messages-webhook-inbound.handler
    events:
      - http:
          path: webhook/messages-inbound
          method: post
          cors: true

resources:
  Resources:
    PasswordLessAuthDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: authCode
            AttributeType: S
          - AttributeName: recipient
            AttributeType: S
          - AttributeName: randomDigits
            AttributeType: N
        KeySchema:
          - AttributeName: authCode
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ${file(config.json):DYNAMODB_TABLE_INDEX}
            KeySchema:
              - AttributeName: recipient
                KeyType: HASH
              - AttributeName: randomDigits
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    PasswordLessDemoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(config.json):BUCKET}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ServerlessRedirectS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${file(config.json):BUCKET}
        PolicyDocument:
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource:
                - arn:aws:s3:::${file(config.json):BUCKET}/*
              Principal: "*"
